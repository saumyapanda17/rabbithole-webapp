{"ast":null,"code":"import { apiService } from \"@/common/api.service.js\";\nexport default {\n  name: \"QuestionEditor\",\n  props: {\n    slug: {\n      type: String,\n      required: false\n    }\n  },\n\n  data() {\n    return {\n      question_body: null,\n      error: null\n    };\n  },\n\n  methods: {\n    onSubmit() {\n      // Tell the REST API to create or update a Question Instance\n      if (!this.question_body) {\n        this.error = \"You can't send an empty question!\";\n      } else if (this.question_body.length > 240) {\n        this.error = \"Ensure this field has no more than 240 characters!\";\n      } else {\n        let endpoint = \"/api/questions/\";\n        let method = \"POST\";\n\n        if (this.slug !== undefined) {\n          endpoint += `${this.slug}/`;\n          method = \"PUT\";\n        }\n\n        apiService(endpoint, method, {\n          content: this.question_body\n        }).then(question_data => {\n          this.$router.push({\n            name: \"question\",\n            params: {\n              slug: question_data.slug\n            }\n          });\n        });\n      }\n    }\n\n  },\n\n  async beforeRouteEnter(to, from, next) {\n    // if the component will be used to update a question, then get the question's data from the REST API\n    if (to.params.slug !== undefined) {\n      let endpoint = `/api/questions/${to.params.slug}/`;\n      let data = await apiService(endpoint);\n      return next(vm => vm.question_body = data.content);\n    } else {\n      return next();\n    }\n  },\n\n  created() {\n    document.title = \"Editor - QuestionTime\";\n  }\n\n};","map":{"version":3,"mappings":"AAkBA;AACA;EACAA,sBADA;EAEAC;IACAC;MACAC,YADA;MAEAC;IAFA;EADA,CAFA;;EAQAC;IACA;MACAC,mBADA;MAEAC;IAFA;EAIA,CAbA;;EAcAC;IACAC;MACA;MACA;QACA;MACA,CAFA,MAEA;QACA;MACA,CAFA,MAEA;QACA;QACA;;QACA;UACAC;UACAC;QACA;;QACAC;UAAAC;QAAA,QACAC;UACA;YACAd,gBADA;YAEAe;cAAAb;YAAA;UAFA;QAIA,CANA;MAQA;IACA;;EAvBA,CAdA;;EAuCA;IACA;IACA;MACA;MACA;MACA;IACA,CAJA,MAIA;MACA;IACA;EACA,CAhDA;;EAiDAc;IACAC;EACA;;AAnDA","names":["name","props","slug","type","required","data","question_body","error","methods","onSubmit","endpoint","method","apiService","content","question_data","params","created","document"],"sourceRoot":"src/views","sources":["QuestionEditor.vue"],"sourcesContent":["<template>\n  <div class=\"container mt-5\">\n    <h1 class=\"mb-3\">Ask a Question</h1>\n    <form @submit.prevent=\"onSubmit\">\n      <textarea\n        v-model=\"question_body\"\n        class=\"form-control\"\n        placeholder=\"What do you want to ask?\"\n        rows=\"3\"\n      ></textarea>\n      <br />\n      <button type=\"submit\" class=\"btn btn-success\">Publish</button>\n    </form>\n    <p v-if=\"error\" class=\"muted mt-2\">{{ error }}</p>\n  </div>\n</template>\n\n<script>\nimport { apiService } from \"@/common/api.service.js\";\nexport default {\n  name: \"QuestionEditor\",\n  props: {\n    slug: {\n      type: String,\n      required: false,\n    },\n  },\n  data() {\n    return {\n      question_body: null,\n      error: null,\n    };\n  },\n  methods: {\n    onSubmit() {\n      // Tell the REST API to create or update a Question Instance\n      if (!this.question_body) {\n        this.error = \"You can't send an empty question!\";\n      } else if (this.question_body.length > 240) {\n        this.error = \"Ensure this field has no more than 240 characters!\";\n      } else {\n        let endpoint = \"/api/questions/\";\n        let method = \"POST\";\n        if (this.slug !== undefined) {\n          endpoint += `${this.slug}/`;\n          method = \"PUT\";\n        }\n        apiService(endpoint, method, { content: this.question_body }).then(\n          (question_data) => {\n            this.$router.push({\n              name: \"question\",\n              params: { slug: question_data.slug },\n            });\n          }\n        );\n      }\n    },\n  },\n  async beforeRouteEnter(to, from, next) {\n    // if the component will be used to update a question, then get the question's data from the REST API\n    if (to.params.slug !== undefined) {\n      let endpoint = `/api/questions/${to.params.slug}/`;\n      let data = await apiService(endpoint);\n      return next((vm) => (vm.question_body = data.content));\n    } else {\n      return next();\n    }\n  },\n  created() {\n    document.title = \"Editor - QuestionTime\";\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}