{"ast":null,"code":"import { apiService } from \"@/common/api.service.js\";\nimport AnswerComponent from \"@/components/Answer.vue\";\nimport QuestionActions from \"@/components/QuestionActions.vue\";\nexport default {\n  name: \"QuestionView\",\n  props: {\n    slug: {\n      type: String,\n      required: true\n    }\n  },\n  components: {\n    AnswerComponent,\n    QuestionActions\n  },\n\n  data() {\n    return {\n      question: {},\n      answers: [],\n      next: null,\n      loadingAnswers: false,\n      newAnswerBody: null,\n      error: null,\n      userHasAnswered: false,\n      showForm: false,\n      requestUser: null\n    };\n  },\n\n  computed: {\n    isQuestionAuthor() {\n      // return true if the logged in user is also the author of the question instance\n      return this.question.author === this.requestUser;\n    }\n\n  },\n  methods: {\n    setPageTitle(title) {\n      // set a given title string as the webpage title\n      document.title = title;\n    },\n\n    setRequestUser() {\n      // the username has been set to localStorage by the App.vue component\n      this.requestUser = window.localStorage.getItem(\"username\");\n    },\n\n    getQuestionData() {\n      // get the details of a question instance from the REST API and call setPageTitle\n      let endpoint = `/api/questions/${this.slug}/`;\n      apiService(endpoint).then(data => {\n        if (data) {\n          this.question = data;\n          this.userHasAnswered = data.user_has_answered;\n          this.setPageTitle(data.content);\n        } else {\n          this.question = null;\n          this.setPageTitle(\"404 - Page Not Found\");\n        }\n      });\n    },\n\n    getQuestionAnswers() {\n      // get a page of answers for a single question from the REST API's paginated 'Questions Endpoint'\n      let endpoint = `/api/questions/${this.slug}/answers/`;\n\n      if (this.next) {\n        endpoint = this.next;\n      }\n\n      this.loadingAnswers = true;\n      apiService(endpoint).then(data => {\n        this.answers.push(...data.results);\n        this.loadingAnswers = false;\n\n        if (data.next) {\n          this.next = data.next;\n        } else {\n          this.next = null;\n        }\n      });\n    },\n\n    onSubmit() {\n      // Tell the REST API to create a new answer for this question based on the user input, then update some data properties\n      if (this.newAnswerBody) {\n        let endpoint = `/api/questions/${this.slug}/answer/`;\n        apiService(endpoint, \"POST\", {\n          body: this.newAnswerBody\n        }).then(data => {\n          this.answers.unshift(data);\n        });\n        this.newAnswerBody = null;\n        this.showForm = false;\n        this.userHasAnswered = true;\n\n        if (this.error) {\n          this.error = null;\n        }\n      } else {\n        this.error = \"You can't send an empty answer!\";\n      }\n    },\n\n    async deleteAnswer(answer) {\n      // delete a given answer from the answers array and make a delete request to the REST API\n      let endpoint = `/api/answers/${answer.id}/`;\n\n      try {\n        await apiService(endpoint, \"DELETE\");\n        this.$delete(this.answers, this.answers.indexOf(answer));\n        this.userHasAnswered = false;\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n  },\n\n  created() {\n    this.getQuestionData();\n    this.getQuestionAnswers();\n    this.setRequestUser();\n  }\n\n};","map":{"version":3,"mappings":"AAqEA;AACA;AACA;AACA;EACAA,oBADA;EAEAC;IACAC;MACAC,YADA;MAEAC;IAFA;EADA,CAFA;EAQAC;IACAC,eADA;IAEAC;EAFA,CARA;;EAYAC;IACA;MACAC,YADA;MAEAC,WAFA;MAGAC,UAHA;MAIAC,qBAJA;MAKAC,mBALA;MAMAC,WANA;MAOAC,sBAPA;MAQAC,eARA;MASAC;IATA;EAWA,CAxBA;;EAyBAC;IACAC;MACA;MACA;IACA;;EAJA,CAzBA;EA+BAC;IACAC;MACA;MACAC;IACA,CAJA;;IAKAC;MACA;MACA;IACA,CARA;;IASAC;MACA;MACA;MACAC,qBACAC,IADA,CACAlB;QACA;UACA;UACA;UACA;QACA,CAJA,MAIA;UACA;UACA;QACA;MAEA,CAXA;IAYA,CAxBA;;IAyBAmB;MACA;MACA;;MACA;QACAC;MACA;;MACA;MACAH,qBACAC,IADA,CACAlB;QACA;QACA;;QACA;UACA;QACA,CAFA,MAEA;UACA;QACA;MACA,CATA;IAUA,CA1CA;;IA2CAqB;MACA;MACA;QACA;QACAJ;UAAAK;QAAA,GACAJ,IADA,CACAlB;UACA;QACA,CAHA;QAIA;QACA;QACA;;QACA;UACA;QACA;MACA,CAZA,MAYA;QACA;MACA;IACA,CA5DA;;IA6DA;MACA;MACA;;MACA;QACA;QACA;QACA;MACA,CAJA,CAKA;QACAuB;MACA;IACA;;EAxEA,CA/BA;;EAyGAC;IACA;IACA;IACA;EACA;;AA7GA","names":["name","props","slug","type","required","components","AnswerComponent","QuestionActions","data","question","answers","next","loadingAnswers","newAnswerBody","error","userHasAnswered","showForm","requestUser","computed","isQuestionAuthor","methods","setPageTitle","document","setRequestUser","getQuestionData","apiService","then","getQuestionAnswers","endpoint","onSubmit","body","console","created"],"sourceRoot":"src/views","sources":["Question.vue"],"sourcesContent":["<template>\r\n  <div class=\"single-question mt-2\">\r\n    <div v-if=\"question\" class=\"container\">\r\n      <h1>{{ question.content }}</h1>\r\n      <QuestionActions\r\n        v-if=\"isQuestionAuthor\"\r\n        :slug=\"question.slug\"\r\n      />\r\n      <p class=\"mb-0\">Posted by:\r\n        <span class=\"author-name\">{{ question.author }}</span>\r\n      </p>\r\n      <p>{{ question.created_at }}</p>\r\n      <hr>\r\n      <div v-if=\"userHasAnswered\">\r\n        <p class=\"answer-added\">You've written an answer!</p>\r\n      </div>\r\n      <div v-else-if=\"showForm\">\r\n        <form class=\"card\" @submit.prevent=\"onSubmit\">\r\n          <div class=\"card-header px-3\">\r\n            Answer the Question\r\n          </div>\r\n          <div class=\"card-block\">\r\n            <textarea \r\n              v-model=\"newAnswerBody\"\r\n              class=\"form-control\"\r\n              placeholder=\"Share Your Knowledge!\"\r\n              rows=\"5\"\r\n            ></textarea>\r\n          </div>\r\n          <div class=\"card-footer px-3\">\r\n            <button type=\"submit\" class=\"btn btn-sm btn-success\">Submit Your Answer</button>\r\n          </div>\r\n        </form>\r\n        <p v-if=\"error\" class=\"error mt-2\">{{ error }}</p>\r\n      </div>\r\n      <div v-else>\r\n        <button\r\n          class=\"btn btn-sm btn-success\"\r\n          @click=\"showForm = true\"\r\n          >Answer the Question\r\n        </button>\r\n      </div>\r\n      <hr>\r\n    </div>\r\n    <div v-else>\r\n      <h1 class=\"error text-center\">404 - Question Not Found</h1>\r\n    </div>\r\n    <div v-if=\"question\" class=\"container\">\r\n      <AnswerComponent \r\n        v-for=\"answer in answers\"\r\n        :answer=\"answer\"\r\n        :requestUser=\"requestUser\"\r\n        :key=\"answer.id\"\r\n        @delete-answer=\"deleteAnswer\"\r\n      />\r\n      <div class=\"my-4\">\r\n        <p v-show=\"loadingAnswers\">...loading...</p>\r\n        <button\r\n          v-show=\"next\"\r\n          @click=\"getQuestionAnswers\"\r\n          class=\"btn btn-sm btn-outline-success\"\r\n          >Load More\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { apiService } from \"@/common/api.service.js\";\r\nimport AnswerComponent from \"@/components/Answer.vue\";\r\nimport QuestionActions from \"@/components/QuestionActions.vue\";\r\nexport default {\r\n  name: \"QuestionView\",\r\n  props: {\r\n    slug: {\r\n      type: String,\r\n      required: true\r\n    }\r\n  },\r\n  components: {\r\n    AnswerComponent,\r\n    QuestionActions\r\n  },\r\n  data() {\r\n    return {\r\n      question: {},\r\n      answers: [],\r\n      next: null,\r\n      loadingAnswers: false,\r\n      newAnswerBody: null,\r\n      error: null,\r\n      userHasAnswered: false,\r\n      showForm: false,\r\n      requestUser: null\r\n    }\r\n  },\r\n  computed: {\r\n    isQuestionAuthor() {\r\n      // return true if the logged in user is also the author of the question instance\r\n      return this.question.author === this.requestUser;\r\n    }\r\n  },\r\n  methods: {\r\n    setPageTitle(title) {\r\n      // set a given title string as the webpage title\r\n      document.title = title;\r\n    },\r\n    setRequestUser() {\r\n      // the username has been set to localStorage by the App.vue component\r\n      this.requestUser = window.localStorage.getItem(\"username\");\r\n    },\r\n    getQuestionData() {\r\n      // get the details of a question instance from the REST API and call setPageTitle\r\n      let endpoint = `/api/questions/${this.slug}/`;\r\n      apiService(endpoint)\r\n        .then(data => {\r\n          if (data) {\r\n            this.question = data;\r\n            this.userHasAnswered = data.user_has_answered;\r\n            this.setPageTitle(data.content)\r\n          } else {\r\n            this.question = null;\r\n            this.setPageTitle(\"404 - Page Not Found\")\r\n          }\r\n\r\n        })\r\n    },\r\n    getQuestionAnswers() {\r\n      // get a page of answers for a single question from the REST API's paginated 'Questions Endpoint'\r\n      let endpoint = `/api/questions/${this.slug}/answers/`;\r\n      if (this.next) {\r\n        endpoint = this.next;\r\n      }\r\n      this.loadingAnswers = true;\r\n      apiService(endpoint)\r\n        .then(data => {\r\n          this.answers.push(...data.results);\r\n          this.loadingAnswers = false;\r\n          if (data.next) {\r\n            this.next = data.next;\r\n          } else {\r\n            this.next = null;\r\n          }\r\n        })\r\n    },\r\n    onSubmit() {\r\n      // Tell the REST API to create a new answer for this question based on the user input, then update some data properties\r\n      if (this.newAnswerBody) {\r\n        let endpoint = `/api/questions/${this.slug}/answer/`;\r\n        apiService(endpoint, \"POST\", { body: this.newAnswerBody })\r\n          .then(data => {\r\n            this.answers.unshift(data)\r\n          })\r\n        this.newAnswerBody = null;\r\n        this.showForm = false;\r\n        this.userHasAnswered = true;\r\n        if (this.error) {\r\n          this.error = null;\r\n        }\r\n      } else {\r\n        this.error = \"You can't send an empty answer!\";\r\n      }\r\n    },\r\n    async deleteAnswer(answer) {\r\n      // delete a given answer from the answers array and make a delete request to the REST API\r\n      let endpoint = `/api/answers/${answer.id}/`;\r\n      try {\r\n        await apiService(endpoint, \"DELETE\")\r\n        this.$delete(this.answers, this.answers.indexOf(answer))\r\n        this.userHasAnswered = false;\r\n      }\r\n      catch (err) {\r\n        console.log(err)\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.getQuestionData()\r\n    this.getQuestionAnswers()\r\n    this.setRequestUser()\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.author-name {\r\n  font-weight: bold;\r\n  color: #DC3545;\r\n}\r\n\r\n.answer-added {\r\n  font-weight: bold;\r\n  color: green;\r\n}\r\n\r\n.error {\r\n  font-weight: bold;\r\n  color: red; \r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}