{"ast":null,"code":"import { apiService } from \"@/common/api.service.js\";\nimport AnswerComponent from \"@/components/Answer.vue\";\nimport QuestionActions from \"@/components/QuestionActions.vue\";\nexport default {\n  name: \"QuestionView\",\n  props: {\n    slug: {\n      type: String,\n      required: true\n    }\n  },\n  components: {\n    AnswerComponent,\n    QuestionActions\n  },\n\n  data() {\n    return {\n      question: {},\n      answers: [],\n      next: null,\n      loadingAnswers: false,\n      newAnswerBody: null,\n      error: null,\n      userHasAnswered: false,\n      showForm: false,\n      requestUser: null\n    };\n  },\n\n  computed: {\n    isQuestionAuthor() {\n      // return true if the logged in user is also the author of the question instance\n      return this.question.author === this.requestUser;\n    }\n\n  },\n  methods: {\n    setPageTitle(title) {\n      // set a given title string as the webpage title\n      document.title = title;\n    },\n\n    setRequestUser() {\n      // the username has been set to localStorage by the App.vue component\n      this.requestUser = window.localStorage.getItem(\"username\");\n    },\n\n    getQuestionData() {\n      // get the details of a question instance from the REST API and call setPageTitle\n      let endpoint = `/api/questions/${this.slug}/`;\n      apiService(endpoint).then(data => {\n        if (data) {\n          this.question = data;\n          this.userHasAnswered = data.user_has_answered;\n          this.setPageTitle(data.content);\n        } else {\n          this.question = null;\n          this.setPageTitle(\"404 - Page Not Found\");\n        }\n      });\n    },\n\n    getQuestionAnswers() {\n      // get a page of answers for a single question from the REST API's paginated 'Questions Endpoint'\n      let endpoint = `/api/questions/${this.slug}/answers/`;\n\n      if (this.next) {\n        endpoint = this.next;\n      }\n\n      this.loadingAnswers = true;\n      apiService(endpoint).then(data => {\n        this.answers.push(...data.results);\n        this.loadingAnswers = false;\n\n        if (data.next) {\n          this.next = data.next;\n        } else {\n          this.next = null;\n        }\n      });\n    },\n\n    onSubmit() {\n      // Tell the REST API to create a new answer for this question based on the user input, then update some data properties\n      if (this.newAnswerBody) {\n        let endpoint = `/api/questions/${this.slug}/answer/`;\n        apiService(endpoint, \"POST\", {\n          body: this.newAnswerBody\n        }).then(data => {\n          this.answers.unshift(data);\n        });\n        this.newAnswerBody = null;\n        this.showForm = false;\n        this.userHasAnswered = true;\n\n        if (this.error) {\n          this.error = null;\n        }\n      } else {\n        this.error = \"You can't send an empty answer!\";\n      }\n    },\n\n    async deleteAnswer(answer) {\n      // delete a given answer from the answers array and make a delete request to the REST API\n      let endpoint = `/api/answers/${answer.id}/`;\n\n      try {\n        await apiService(endpoint, \"DELETE\");\n        this.$delete(this.answers, this.answers.indexOf(answer));\n        this.userHasAnswered = false;\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n  },\n\n  created() {\n    this.getQuestionData();\n    this.getQuestionAnswers();\n    this.setRequestUser();\n  }\n\n};","map":{"version":3,"mappings":"AAkEA;AACA;AACA;AACA;EACAA,oBADA;EAEAC;IACAC;MACAC,YADA;MAEAC;IAFA;EADA,CAFA;EAQAC;IACAC,eADA;IAEAC;EAFA,CARA;;EAYAC;IACA;MACAC,YADA;MAEAC,WAFA;MAGAC,UAHA;MAIAC,qBAJA;MAKAC,mBALA;MAMAC,WANA;MAOAC,sBAPA;MAQAC,eARA;MASAC;IATA;EAWA,CAxBA;;EAyBAC;IACAC;MACA;MACA;IACA;;EAJA,CAzBA;EA+BAC;IACAC;MACA;MACAC;IACA,CAJA;;IAKAC;MACA;MACA;IACA,CARA;;IASAC;MACA;MACA;MACAC;QACA;UACA;UACA;UACA;QACA,CAJA,MAIA;UACA;UACA;QACA;MACA,CATA;IAUA,CAtBA;;IAuBAC;MACA;MACA;;MACA;QACAC;MACA;;MACA;MACAF;QACA;QACA;;QACA;UACA;QACA,CAFA,MAEA;UACA;QACA;MACA,CARA;IASA,CAvCA;;IAwCAG;MACA;MACA;QACA;QACAH;UAAAI;QAAA,QACArB;UACA;QACA,CAHA;QAKA;QACA;QACA;;QACA;UACA;QACA;MACA,CAbA,MAaA;QACA;MACA;IACA,CA1DA;;IA2DA;MACA;MACA;;MACA;QACA;QACA;QACA;MACA,CAJA,CAIA;QACAsB;MACA;IACA;;EArEA,CA/BA;;EAsGAC;IACA;IACA;IACA;EACA;;AA1GA","names":["name","props","slug","type","required","components","AnswerComponent","QuestionActions","data","question","answers","next","loadingAnswers","newAnswerBody","error","userHasAnswered","showForm","requestUser","computed","isQuestionAuthor","methods","setPageTitle","document","setRequestUser","getQuestionData","apiService","getQuestionAnswers","endpoint","onSubmit","body","console","created"],"sourceRoot":"src/views","sources":["Question.vue"],"sourcesContent":["<template>\n  <div class=\"single-question mt-2\">\n    <div v-if=\"question\" class=\"container\">\n      <h1>{{ question.content }}</h1>\n      <QuestionActions v-if=\"isQuestionAuthor\" :slug=\"question.slug\" />\n      <p class=\"mb-0\">\n        Posted by:\n        <span class=\"author-name\">{{ question.author }}</span>\n      </p>\n      <p>{{ question.created_at }}</p>\n      <hr />\n      <div v-if=\"userHasAnswered\">\n        <p class=\"answer-added\">You've written an answer!</p>\n      </div>\n      <div v-else-if=\"showForm\">\n        <form class=\"card\" @submit.prevent=\"onSubmit\">\n          <div class=\"card-header px-3\">Answer the Question</div>\n          <div class=\"card-block\">\n            <textarea\n              v-model=\"newAnswerBody\"\n              class=\"form-control\"\n              placeholder=\"Share Your Knowledge!\"\n              rows=\"5\"\n            ></textarea>\n          </div>\n          <div class=\"card-footer px-3\">\n            <button type=\"submit\" class=\"btn btn-sm btn-success\">\n              Submit Your Answer\n            </button>\n          </div>\n        </form>\n        <p v-if=\"error\" class=\"error mt-2\">{{ error }}</p>\n      </div>\n      <div v-else>\n        <button class=\"btn btn-sm btn-success\" @click=\"showForm = true\">\n          Answer the Question\n        </button>\n      </div>\n      <hr />\n    </div>\n    <div v-else>\n      <h1 class=\"error text-center\">404 - Question Not Found</h1>\n    </div>\n    <div v-if=\"question\" class=\"container\">\n      <AnswerComponent\n        v-for=\"answer in answers\"\n        :answer=\"answer\"\n        :requestUser=\"requestUser\"\n        :key=\"answer.id\"\n        @delete-answer=\"deleteAnswer\"\n      />\n      <div class=\"my-4\">\n        <p v-show=\"loadingAnswers\">...loading...</p>\n        <button\n          v-show=\"next\"\n          @click=\"getQuestionAnswers\"\n          class=\"btn btn-sm btn-outline-success\"\n        >\n          Load More\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { apiService } from \"@/common/api.service.js\";\nimport AnswerComponent from \"@/components/Answer.vue\";\nimport QuestionActions from \"@/components/QuestionActions.vue\";\nexport default {\n  name: \"QuestionView\",\n  props: {\n    slug: {\n      type: String,\n      required: true,\n    },\n  },\n  components: {\n    AnswerComponent,\n    QuestionActions,\n  },\n  data() {\n    return {\n      question: {},\n      answers: [],\n      next: null,\n      loadingAnswers: false,\n      newAnswerBody: null,\n      error: null,\n      userHasAnswered: false,\n      showForm: false,\n      requestUser: null,\n    };\n  },\n  computed: {\n    isQuestionAuthor() {\n      // return true if the logged in user is also the author of the question instance\n      return this.question.author === this.requestUser;\n    },\n  },\n  methods: {\n    setPageTitle(title) {\n      // set a given title string as the webpage title\n      document.title = title;\n    },\n    setRequestUser() {\n      // the username has been set to localStorage by the App.vue component\n      this.requestUser = window.localStorage.getItem(\"username\");\n    },\n    getQuestionData() {\n      // get the details of a question instance from the REST API and call setPageTitle\n      let endpoint = `/api/questions/${this.slug}/`;\n      apiService(endpoint).then((data) => {\n        if (data) {\n          this.question = data;\n          this.userHasAnswered = data.user_has_answered;\n          this.setPageTitle(data.content);\n        } else {\n          this.question = null;\n          this.setPageTitle(\"404 - Page Not Found\");\n        }\n      });\n    },\n    getQuestionAnswers() {\n      // get a page of answers for a single question from the REST API's paginated 'Questions Endpoint'\n      let endpoint = `/api/questions/${this.slug}/answers/`;\n      if (this.next) {\n        endpoint = this.next;\n      }\n      this.loadingAnswers = true;\n      apiService(endpoint).then((data) => {\n        this.answers.push(...data.results);\n        this.loadingAnswers = false;\n        if (data.next) {\n          this.next = data.next;\n        } else {\n          this.next = null;\n        }\n      });\n    },\n    onSubmit() {\n      // Tell the REST API to create a new answer for this question based on the user input, then update some data properties\n      if (this.newAnswerBody) {\n        let endpoint = `/api/questions/${this.slug}/answer/`;\n        apiService(endpoint, \"POST\", { body: this.newAnswerBody }).then(\n          (data) => {\n            this.answers.unshift(data);\n          }\n        );\n        this.newAnswerBody = null;\n        this.showForm = false;\n        this.userHasAnswered = true;\n        if (this.error) {\n          this.error = null;\n        }\n      } else {\n        this.error = \"You can't send an empty answer!\";\n      }\n    },\n    async deleteAnswer(answer) {\n      // delete a given answer from the answers array and make a delete request to the REST API\n      let endpoint = `/api/answers/${answer.id}/`;\n      try {\n        await apiService(endpoint, \"DELETE\");\n        this.$delete(this.answers, this.answers.indexOf(answer));\n        this.userHasAnswered = false;\n      } catch (err) {\n        console.log(err);\n      }\n    },\n  },\n  created() {\n    this.getQuestionData();\n    this.getQuestionAnswers();\n    this.setRequestUser();\n  },\n};\n</script>\n\n<style scoped>\n.author-name {\n  font-weight: bold;\n  color:  rgb(160, 42, 81) !important;\n}\n\n.answer-added {\n  font-weight: bold;\n  color: rgb(12, 91, 115);\n}\n\n.error {\n  font-weight: bold;\n  color:  rgb(160, 42, 81) !important;\n}\n\n.btn-outline-danger {\n    color:  rgb(160, 42, 81) !important;\n    border-color:  rgb(160, 42, 81) !important;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}